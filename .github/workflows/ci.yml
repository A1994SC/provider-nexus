name: CI

on:
  push:
    branches:
    - main
    - release-*
    - feature/*
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'
    paths-ignore:
    - '.github/**'
    - 'examples/**'
  pull_request: {}
  workflow_dispatch: {}

env:
  # Common versions
  GO_VERSION: '1.22'
  GOLANGCI_VERSION: 'v1.56.2'
  DOCKER_BUILDX_VERSION: 'v0.8.2'

  PROVIDER: provider-nexus

  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/crossplane/provider-nexus
  # IMAGE_NAME: ${{ github.repository }}

  # Common users. We can't run a step 'if secrets.XXX != ""' but we can run a
  # step 'if env.XXX != ""', so we copy these to succinctly test whether
  # credentials have been provided before trying to run steps that need them.
  UPBOUND_MARKETPLACE_PUSH_ROBOT_USR: ${{ secrets.UPBOUND_MARKETPLACE_PUSH_ROBOT_USR }}

jobs:
  detect-noop:
    runs-on: ubuntu-22.04
    outputs:
      noop: ${{ steps.noop.outputs.should_skip }}
    steps:
    - name: Detect No-op Changes
      id: noop
      uses: fkirc/skip-duplicate-actions@f75f66ce1886f00957d99748a42c724f4330bdcf # v5.3.1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        paths_ignore: '["**.md", "**.png", "**.jpg"]'
        do_not_skip: '["workflow_dispatch", "schedule", "push"]'

  report-breaking-changes:
    runs-on: ubuntu-22.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'
    steps:
    - name: Checkout
      uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
      with:
        submodules: true

    - name: Get modified CRDs
      id: modified-crds
      uses: tj-actions/changed-files@a29e8b565651ce417abb5db7164b4a2ad8b6155c # v44
      with:
        files: |
          package/crds/**

    - name: Report breaking CRD OpenAPI v3 schema changes
      if: steps.modified-crds.outputs.any_changed == 'true'
      env:
        MODIFIED_CRD_LIST: ${{ steps.modified-crds.outputs.all_changed_files }}
      run: |
        make crddiff

    - name: Report native schema version changes
      if: ${{ inputs.upjet-based-provider }}
      run: |
        make schema-version-diff

  lint:
    runs-on: ubuntu-22.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
    - name: Checkout
      uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
      with:
        submodules: true

    - name: Setup Go
      uses: actions/setup-go@cdcb36043654635271a94b9a6d1392de5bb323a7 # v5
      with:
        go-version-file: go.mod

    - name: Find the Go Build Cache
      id: go
      run: echo "cache=$(make go.cachedir)" >> $GITHUB_OUTPUT

    - name: Cache the Go Build Cache
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
      with:
        path: ${{ steps.go.outputs.cache }}
        key: ${{ runner.os }}-build-lint-${{ hashFiles('**/go.sum') }}
        restore-keys: ${{ runner.os }}-build-lint-

    - name: Cache Go Dependencies
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
      with:
        path: .work/pkg
        key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
        restore-keys: ${{ runner.os }}-pkg-

    - name: Vendor Dependencies
      run: make vendor vendor.check

    # We could run 'make lint' but we prefer this action because it leaves
    # 'annotations' (i.e. it comments on PRs to point out linter violations).
    - name: Lint
      uses: golangci/golangci-lint-action@a4f60bb28d35aeee14e6880718e0c85ff1882e64 # v6
      with:
        version: ${{ env.GOLANGCI_VERSION }}

  check-diff:
    runs-on: ubuntu-22.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
    - name: Checkout
      uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
      with:
        submodules: true

    - name: Setup Go
      uses: actions/setup-go@cdcb36043654635271a94b9a6d1392de5bb323a7 # v5
      with:
        go-version-file: go.mod

    - name: Install goimports
      run: go install golang.org/x/tools/cmd/goimports

    - name: Find the Go Build Cache
      id: go
      run: echo "cache=$(make go.cachedir)" >> $GITHUB_OUTPUT

    - name: Cache the Go Build Cache
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
      with:
        path: ${{ steps.go.outputs.cache }}
        key: ${{ runner.os }}-build-check-diff-${{ hashFiles('**/go.sum') }}
        restore-keys: ${{ runner.os }}-build-check-diff-

    - name: Cache Go Dependencies
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
      with:
        path: .work/pkg
        key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
        restore-keys: ${{ runner.os }}-pkg-

    - name: Vendor Dependencies
      run: make vendor vendor.check

    - name: Check Diff
      run: make check-diff

  unit-tests:
    runs-on: ubuntu-22.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
    - name: Checkout
      uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
      with:
        submodules: true

    - name: Fetch History
      run: git fetch --prune --unshallow

    - name: Setup Go
      uses: actions/setup-go@cdcb36043654635271a94b9a6d1392de5bb323a7 # v5
      with:
        go-version-file: go.mod

    - name: Find the Go Build Cache
      id: go
      run: echo "cache=$(make go.cachedir)" >> $GITHUB_OUTPUT

    - name: Cache the Go Build Cache
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
      with:
        path: ${{ steps.go.outputs.cache }}
        key: ${{ runner.os }}-build-unit-tests-${{ hashFiles('**/go.sum') }}
        restore-keys: ${{ runner.os }}-build-unit-tests-

    - name: Cache Go Dependencies
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
      with:
        path: .work/pkg
        key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
        restore-keys: ${{ runner.os }}-pkg-

    - name: Vendor Dependencies
      run: make vendor vendor.check

    - name: Run Unit Tests
      run: make -j2 test

    - name: Publish Unit Test Coverage
      uses: codecov/codecov-action@6d798873df2b1b8e5846dba6fb86631229fbcb17 # v4
      with:
        flags: unittests
        file: _output/tests/linux_amd64/coverage.txt

  local-deploy:
    runs-on: ubuntu-22.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
    - name: Checkout
      uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
      with:
        submodules: true

    - name: Fetch History
      run: git fetch --prune --unshallow

    - name: Setup Go
      uses: actions/setup-go@cdcb36043654635271a94b9a6d1392de5bb323a7 # v5
      with:
        go-version-file: go.mod

    - name: Find the Go Build Cache
      id: go
      run: echo "cache=$(make go.cachedir)" >> $GITHUB_OUTPUT

    - name: Cache the Go Build Cache
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
      with:
        path: ${{ steps.go.outputs.cache }}
        key: ${{ runner.os }}-build-unit-tests-${{ hashFiles('**/go.sum') }}
        restore-keys: ${{ runner.os }}-build-unit-tests-

    - name: Cache Go Dependencies
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
      with:
        path: .work/pkg
        key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
        restore-keys: ${{ runner.os }}-pkg-

    - name: Vendor Dependencies
      run: make vendor vendor.check

    - name: Deploying locally built provider package
      run: make local-deploy

  publish-artifacts:
    runs-on: ubuntu-22.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    permissions:
      packages: write

    outputs:
      VERSION:  ${{ steps.ver.outputs.VERSION }}

    steps:
    - name: Setup QEMU
      uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3
      with:
        platforms: all

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3
      with:
        version: ${{ env.DOCKER_BUILDX_VERSION }}
        install: true

    - name: Login to ghcr.io
      uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20 # v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Checkout
      uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
      with:
        submodules: true

    - name: Fetch History
      run: git fetch --prune --unshallow

    - name: Setup Go
      uses: actions/setup-go@cdcb36043654635271a94b9a6d1392de5bb323a7 # v5
      with:
        go-version-file: go.mod

    - name: Find the Go Build Cache
      id: go
      run: echo "cache=$(make go.cachedir)" >> $GITHUB_OUTPUT

    - name: Find the version
      id: ver
      run: make common.buildvars >> $GITHUB_OUTPUT

    - name: Cache the Go Build Cache
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
      with:
        path: ${{ steps.go.outputs.cache }}
        key: ${{ runner.os }}-build-publish-artifacts-${{ hashFiles('**/go.sum') }}
        restore-keys: ${{ runner.os }}-build-publish-artifacts-

    - name: Cache Go Dependencies
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
      with:
        path: .work/pkg
        key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
        restore-keys: ${{ runner.os }}-pkg-

    - name: Vendor Dependencies
      run: make vendor vendor.check

    - name: Build Artifacts
      run: make -j2 build.all
      env:
        # We're using docker buildx, which doesn't actually load the images it
        # builds by default. Specifying --load does so.
        BUILD_ARGS: "--load"
        BUILD_REGISTRY: build

    - name: Build xpkg
      uses: crossplane-contrib/xpkg-action@master
      with:
        channel: ${{ github.event.inputs.channel }}
        version: ${{ github.event.inputs.version }}
        command: xpkg build -f ./package/ --embed-runtime-image=build/${{ env.PROVIDER }}-amd64 -o ./package/${{ env.PROVIDER }}.xpkg

    - name: Push xpkg
      uses: crossplane-contrib/xpkg-action@master
      with:
        command: xpkg push -f ./package/${{ env.PROVIDER }}.xpkg ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.ver.outputs.VERSION }}

  sign-artifacts:
    runs-on: ubuntu-22.04
    needs: publish-artifacts
    if: github.event_name != 'pull_request'

    permissions:
      id-token: write
      packages: write

    steps:
    - name: Install cosign
      uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 # v3.5.0

    - name: Login to ghcr.io
      uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20 # v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull image
      run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.publish-artifacts.outputs.VERSION }}

    - name: Get Repo Digest
      id: meta
      run: echo "digest=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.publish-artifacts.outputs.VERSION }})" >> $GITHUB_OUTPUT

    - name: Sign the published Docker Image
      env:
        COSIGN_EXPERIMENTAL: 1
      run: |
        cosign sign --yes ${{ steps.meta.outputs.digest }}
        cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.publish-artifacts.outputs.VERSION }}
