// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type YumGroupGroupInitParameters struct {

	// (Set of String) Member repositories names
	// Member repositories names
	MemberNames []*string `json:"memberNames,omitempty" tf:"member_names,omitempty"`
}

type YumGroupGroupObservation struct {

	// (Set of String) Member repositories names
	// Member repositories names
	MemberNames []*string `json:"memberNames,omitempty" tf:"member_names,omitempty"`
}

type YumGroupGroupParameters struct {

	// (Set of String) Member repositories names
	// Member repositories names
	// +kubebuilder:validation:Optional
	MemberNames []*string `json:"memberNames" tf:"member_names,omitempty"`
}

type YumGroupInitParameters struct {

	// (Block List, Min: 1, Max: 1) Configuration for repository group (see below for nested schema)
	// Configuration for repository group
	Group []YumGroupGroupInitParameters `json:"group,omitempty" tf:"group,omitempty"`

	// (String) A unique identifier for this repository
	// A unique identifier for this repository
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Whether this repository accepts incoming requests
	// Whether this repository accepts incoming requests
	Online *bool `json:"online,omitempty" tf:"online,omitempty"`

	// (Block List, Min: 1, Max: 1) The storage configuration of the repository (see below for nested schema)
	// The storage configuration of the repository
	Storage []YumGroupStorageInitParameters `json:"storage,omitempty" tf:"storage,omitempty"`

	// (Block List, Max: 1) Contains signing data of repositores (see below for nested schema)
	// Contains signing data of repositores
	YumSigning []YumSigningInitParameters `json:"yumSigning,omitempty" tf:"yum_signing,omitempty"`
}

type YumGroupObservation struct {

	// (Block List, Min: 1, Max: 1) Configuration for repository group (see below for nested schema)
	// Configuration for repository group
	Group []YumGroupGroupObservation `json:"group,omitempty" tf:"group,omitempty"`

	// (String) Used to identify resource at nexus
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) A unique identifier for this repository
	// A unique identifier for this repository
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Whether this repository accepts incoming requests
	// Whether this repository accepts incoming requests
	Online *bool `json:"online,omitempty" tf:"online,omitempty"`

	// (Block List, Min: 1, Max: 1) The storage configuration of the repository (see below for nested schema)
	// The storage configuration of the repository
	Storage []YumGroupStorageObservation `json:"storage,omitempty" tf:"storage,omitempty"`

	// (Block List, Max: 1) Contains signing data of repositores (see below for nested schema)
	// Contains signing data of repositores
	YumSigning []YumSigningParameters `json:"yumSigning,omitempty" tf:"yum_signing,omitempty"`
}

type YumGroupParameters struct {

	// (Block List, Min: 1, Max: 1) Configuration for repository group (see below for nested schema)
	// Configuration for repository group
	// +kubebuilder:validation:Optional
	Group []YumGroupGroupParameters `json:"group,omitempty" tf:"group,omitempty"`

	// (String) A unique identifier for this repository
	// A unique identifier for this repository
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Whether this repository accepts incoming requests
	// Whether this repository accepts incoming requests
	// +kubebuilder:validation:Optional
	Online *bool `json:"online,omitempty" tf:"online,omitempty"`

	// (Block List, Min: 1, Max: 1) The storage configuration of the repository (see below for nested schema)
	// The storage configuration of the repository
	// +kubebuilder:validation:Optional
	Storage []YumGroupStorageParameters `json:"storage,omitempty" tf:"storage,omitempty"`

	// (Block List, Max: 1) Contains signing data of repositores (see below for nested schema)
	// Contains signing data of repositores
	// +kubebuilder:validation:Optional
	YumSigning []YumSigningParameters `json:"yumSigning,omitempty" tf:"yum_signing,omitempty"`
}

type YumGroupStorageInitParameters struct {

	// (String) Blob store used to store repository contents
	// Blob store used to store repository contents
	BlobStoreName *string `json:"blobStoreName,omitempty" tf:"blob_store_name,omitempty"`

	// (Boolean) Whether to validate uploaded content's MIME type appropriate for the repository format
	// Whether to validate uploaded content's MIME type appropriate for the repository format
	StrictContentTypeValidation *bool `json:"strictContentTypeValidation,omitempty" tf:"strict_content_type_validation,omitempty"`
}

type YumGroupStorageObservation struct {

	// (String) Blob store used to store repository contents
	// Blob store used to store repository contents
	BlobStoreName *string `json:"blobStoreName,omitempty" tf:"blob_store_name,omitempty"`

	// (Boolean) Whether to validate uploaded content's MIME type appropriate for the repository format
	// Whether to validate uploaded content's MIME type appropriate for the repository format
	StrictContentTypeValidation *bool `json:"strictContentTypeValidation,omitempty" tf:"strict_content_type_validation,omitempty"`
}

type YumGroupStorageParameters struct {

	// (String) Blob store used to store repository contents
	// Blob store used to store repository contents
	// +kubebuilder:validation:Optional
	BlobStoreName *string `json:"blobStoreName" tf:"blob_store_name,omitempty"`

	// (Boolean) Whether to validate uploaded content's MIME type appropriate for the repository format
	// Whether to validate uploaded content's MIME type appropriate for the repository format
	// +kubebuilder:validation:Optional
	StrictContentTypeValidation *bool `json:"strictContentTypeValidation,omitempty" tf:"strict_content_type_validation,omitempty"`
}

type YumSigningInitParameters struct {
}

type YumSigningObservation struct {
}

type YumSigningParameters struct {

	// -export-secret-key --armor)
	// PGP signing key pair (armored private key e.g. gpg --export-secret-key --armor)
	// +kubebuilder:validation:Required
	KeypairSecretRef v1.SecretKeySelector `json:"keypairSecretRef" tf:"-"`

	// (String, Sensitive) Passphrase to access PGP signing key
	// Passphrase to access PGP signing key
	// +kubebuilder:validation:Optional
	PassphraseSecretRef *v1.SecretKeySelector `json:"passphraseSecretRef,omitempty" tf:"-"`
}

// YumGroupSpec defines the desired state of YumGroup
type YumGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     YumGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider YumGroupInitParameters `json:"initProvider,omitempty"`
}

// YumGroupStatus defines the observed state of YumGroup.
type YumGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        YumGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// YumGroup is the Schema for the YumGroups API. Use this resource to create a group yum repository.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nexus}
type YumGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.group) || (has(self.initProvider) && has(self.initProvider.group))",message="spec.forProvider.group is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.storage) || (has(self.initProvider) && has(self.initProvider.storage))",message="spec.forProvider.storage is a required parameter"
	Spec   YumGroupSpec   `json:"spec"`
	Status YumGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// YumGroupList contains a list of YumGroups
type YumGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []YumGroup `json:"items"`
}

// Repository type metadata.
var (
	YumGroup_Kind             = "YumGroup"
	YumGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: YumGroup_Kind}.String()
	YumGroup_KindAPIVersion   = YumGroup_Kind + "." + CRDGroupVersion.String()
	YumGroup_GroupVersionKind = CRDGroupVersion.WithKind(YumGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&YumGroup{}, &YumGroupList{})
}
