/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NpmGroupGroupInitParameters struct {

	// (Set of String) Member repositories names
	// Member repositories names
	MemberNames []*string `json:"memberNames,omitempty" tf:"member_names,omitempty"`

	// only: This field is for the Group Deployment feature available in NXRM Pro.
	// Pro-only: This field is for the Group Deployment feature available in NXRM Pro.
	WritableMember *string `json:"writableMember,omitempty" tf:"writable_member,omitempty"`
}

type NpmGroupGroupObservation struct {

	// (Set of String) Member repositories names
	// Member repositories names
	MemberNames []*string `json:"memberNames,omitempty" tf:"member_names,omitempty"`

	// only: This field is for the Group Deployment feature available in NXRM Pro.
	// Pro-only: This field is for the Group Deployment feature available in NXRM Pro.
	WritableMember *string `json:"writableMember,omitempty" tf:"writable_member,omitempty"`
}

type NpmGroupGroupParameters struct {

	// (Set of String) Member repositories names
	// Member repositories names
	// +kubebuilder:validation:Optional
	MemberNames []*string `json:"memberNames" tf:"member_names,omitempty"`

	// only: This field is for the Group Deployment feature available in NXRM Pro.
	// Pro-only: This field is for the Group Deployment feature available in NXRM Pro.
	// +kubebuilder:validation:Optional
	WritableMember *string `json:"writableMember,omitempty" tf:"writable_member,omitempty"`
}

type NpmGroupInitParameters struct {

	// (Block List, Min: 1, Max: 1) Configuration for repository group (see below for nested schema)
	// Configuration for repository group
	Group []NpmGroupGroupInitParameters `json:"group,omitempty" tf:"group,omitempty"`

	// (String) A unique identifier for this repository
	// A unique identifier for this repository
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Whether this repository accepts incoming requests
	// Whether this repository accepts incoming requests
	Online *bool `json:"online,omitempty" tf:"online,omitempty"`

	// (Block List, Min: 1, Max: 1) The storage configuration of the repository (see below for nested schema)
	// The storage configuration of the repository
	Storage []NpmGroupStorageInitParameters `json:"storage,omitempty" tf:"storage,omitempty"`
}

type NpmGroupObservation struct {

	// (Block List, Min: 1, Max: 1) Configuration for repository group (see below for nested schema)
	// Configuration for repository group
	Group []NpmGroupGroupObservation `json:"group,omitempty" tf:"group,omitempty"`

	// (String) Used to identify resource at nexus
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) A unique identifier for this repository
	// A unique identifier for this repository
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Whether this repository accepts incoming requests
	// Whether this repository accepts incoming requests
	Online *bool `json:"online,omitempty" tf:"online,omitempty"`

	// (Block List, Min: 1, Max: 1) The storage configuration of the repository (see below for nested schema)
	// The storage configuration of the repository
	Storage []NpmGroupStorageObservation `json:"storage,omitempty" tf:"storage,omitempty"`
}

type NpmGroupParameters struct {

	// (Block List, Min: 1, Max: 1) Configuration for repository group (see below for nested schema)
	// Configuration for repository group
	// +kubebuilder:validation:Optional
	Group []NpmGroupGroupParameters `json:"group,omitempty" tf:"group,omitempty"`

	// (String) A unique identifier for this repository
	// A unique identifier for this repository
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Whether this repository accepts incoming requests
	// Whether this repository accepts incoming requests
	// +kubebuilder:validation:Optional
	Online *bool `json:"online,omitempty" tf:"online,omitempty"`

	// (Block List, Min: 1, Max: 1) The storage configuration of the repository (see below for nested schema)
	// The storage configuration of the repository
	// +kubebuilder:validation:Optional
	Storage []NpmGroupStorageParameters `json:"storage,omitempty" tf:"storage,omitempty"`
}

type NpmGroupStorageInitParameters struct {

	// (String) Blob store used to store repository contents
	// Blob store used to store repository contents
	BlobStoreName *string `json:"blobStoreName,omitempty" tf:"blob_store_name,omitempty"`

	// (Boolean) Whether to validate uploaded content's MIME type appropriate for the repository format
	// Whether to validate uploaded content's MIME type appropriate for the repository format
	StrictContentTypeValidation *bool `json:"strictContentTypeValidation,omitempty" tf:"strict_content_type_validation,omitempty"`
}

type NpmGroupStorageObservation struct {

	// (String) Blob store used to store repository contents
	// Blob store used to store repository contents
	BlobStoreName *string `json:"blobStoreName,omitempty" tf:"blob_store_name,omitempty"`

	// (Boolean) Whether to validate uploaded content's MIME type appropriate for the repository format
	// Whether to validate uploaded content's MIME type appropriate for the repository format
	StrictContentTypeValidation *bool `json:"strictContentTypeValidation,omitempty" tf:"strict_content_type_validation,omitempty"`
}

type NpmGroupStorageParameters struct {

	// (String) Blob store used to store repository contents
	// Blob store used to store repository contents
	// +kubebuilder:validation:Optional
	BlobStoreName *string `json:"blobStoreName" tf:"blob_store_name,omitempty"`

	// (Boolean) Whether to validate uploaded content's MIME type appropriate for the repository format
	// Whether to validate uploaded content's MIME type appropriate for the repository format
	// +kubebuilder:validation:Optional
	StrictContentTypeValidation *bool `json:"strictContentTypeValidation,omitempty" tf:"strict_content_type_validation,omitempty"`
}

// NpmGroupSpec defines the desired state of NpmGroup
type NpmGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NpmGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NpmGroupInitParameters `json:"initProvider,omitempty"`
}

// NpmGroupStatus defines the observed state of NpmGroup.
type NpmGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NpmGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NpmGroup is the Schema for the NpmGroups API. Use this resource to create a group npm repository.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nexus}
type NpmGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.group) || (has(self.initProvider) && has(self.initProvider.group))",message="spec.forProvider.group is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.storage) || (has(self.initProvider) && has(self.initProvider.storage))",message="spec.forProvider.storage is a required parameter"
	Spec   NpmGroupSpec   `json:"spec"`
	Status NpmGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NpmGroupList contains a list of NpmGroups
type NpmGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NpmGroup `json:"items"`
}

// Repository type metadata.
var (
	NpmGroup_Kind             = "NpmGroup"
	NpmGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NpmGroup_Kind}.String()
	NpmGroup_KindAPIVersion   = NpmGroup_Kind + "." + CRDGroupVersion.String()
	NpmGroup_GroupVersionKind = CRDGroupVersion.WithKind(NpmGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&NpmGroup{}, &NpmGroupList{})
}
