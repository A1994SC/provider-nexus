// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GroupInitParameters struct {

	// (String) The policy how to fill the members. Possible values: roundRobin or writeToFirst
	// The policy how to fill the members. Possible values: `roundRobin` or `writeToFirst`
	FillPolicy *string `json:"fillPolicy,omitempty" tf:"fill_policy,omitempty"`

	// (Set of String) List of the names of blob stores that are members of this group
	// List of the names of blob stores that are members of this group
	// +listType=set
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// (String) Blobstore name
	// Blobstore name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) Soft quota of the blobstore (see below for nested schema)
	// Soft quota of the blobstore
	SoftQuota []GroupSoftQuotaInitParameters `json:"softQuota,omitempty" tf:"soft_quota,omitempty"`
}

type GroupObservation struct {

	// (Number) Available space in Bytes
	// Available space in Bytes
	AvailableSpaceInBytes *float64 `json:"availableSpaceInBytes,omitempty" tf:"available_space_in_bytes,omitempty"`

	// (Number) Count of blobs
	// Count of blobs
	BlobCount *float64 `json:"blobCount,omitempty" tf:"blob_count,omitempty"`

	// (String) The policy how to fill the members. Possible values: roundRobin or writeToFirst
	// The policy how to fill the members. Possible values: `roundRobin` or `writeToFirst`
	FillPolicy *string `json:"fillPolicy,omitempty" tf:"fill_policy,omitempty"`

	// (String) Used to identify resource at nexus
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Set of String) List of the names of blob stores that are members of this group
	// List of the names of blob stores that are members of this group
	// +listType=set
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// (String) Blobstore name
	// Blobstore name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) Soft quota of the blobstore (see below for nested schema)
	// Soft quota of the blobstore
	SoftQuota []GroupSoftQuotaObservation `json:"softQuota,omitempty" tf:"soft_quota,omitempty"`

	// (Number) The total size of the blobstore in Bytes
	// The total size of the blobstore in Bytes
	TotalSizeInBytes *float64 `json:"totalSizeInBytes,omitempty" tf:"total_size_in_bytes,omitempty"`
}

type GroupParameters struct {

	// (String) The policy how to fill the members. Possible values: roundRobin or writeToFirst
	// The policy how to fill the members. Possible values: `roundRobin` or `writeToFirst`
	// +kubebuilder:validation:Optional
	FillPolicy *string `json:"fillPolicy,omitempty" tf:"fill_policy,omitempty"`

	// (Set of String) List of the names of blob stores that are members of this group
	// List of the names of blob stores that are members of this group
	// +kubebuilder:validation:Optional
	// +listType=set
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// (String) Blobstore name
	// Blobstore name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) Soft quota of the blobstore (see below for nested schema)
	// Soft quota of the blobstore
	// +kubebuilder:validation:Optional
	SoftQuota []GroupSoftQuotaParameters `json:"softQuota,omitempty" tf:"soft_quota,omitempty"`
}

type GroupSoftQuotaInitParameters struct {

	// (Number) The limit in Bytes. Minimum value is 1000000
	// The limit in Bytes. Minimum value is 1000000
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// (String) The type to use such as spaceRemainingQuota, or spaceUsedQuota
	// The type to use such as spaceRemainingQuota, or spaceUsedQuota
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type GroupSoftQuotaObservation struct {

	// (Number) The limit in Bytes. Minimum value is 1000000
	// The limit in Bytes. Minimum value is 1000000
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// (String) The type to use such as spaceRemainingQuota, or spaceUsedQuota
	// The type to use such as spaceRemainingQuota, or spaceUsedQuota
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type GroupSoftQuotaParameters struct {

	// (Number) The limit in Bytes. Minimum value is 1000000
	// The limit in Bytes. Minimum value is 1000000
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit" tf:"limit,omitempty"`

	// (String) The type to use such as spaceRemainingQuota, or spaceUsedQuota
	// The type to use such as spaceRemainingQuota, or spaceUsedQuota
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

// GroupSpec defines the desired state of Group
type GroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GroupInitParameters `json:"initProvider,omitempty"`
}

// GroupStatus defines the observed state of Group.
type GroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Group is the Schema for the Groups API. ~> PRO Feature Use this resource to create a Nexus group blobstore.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nexus}
type Group struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.fillPolicy) || (has(self.initProvider) && has(self.initProvider.fillPolicy))",message="spec.forProvider.fillPolicy is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.members) || (has(self.initProvider) && has(self.initProvider.members))",message="spec.forProvider.members is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   GroupSpec   `json:"spec"`
	Status GroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupList contains a list of Groups
type GroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Group `json:"items"`
}

// Repository type metadata.
var (
	Group_Kind             = "Group"
	Group_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Group_Kind}.String()
	Group_KindAPIVersion   = Group_Kind + "." + CRDGroupVersion.String()
	Group_GroupVersionKind = CRDGroupVersion.WithKind(Group_Kind)
)

func init() {
	SchemeBuilder.Register(&Group{}, &GroupList{})
}
