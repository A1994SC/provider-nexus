// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RealmsInitParameters struct {

	// (List of String) Set the active security realms in the order they should be used.
	// Set the active security realms in the order they should be used.
	Active []*string `json:"active,omitempty" tf:"active,omitempty"`
}

type RealmsObservation struct {

	// (List of String) Set the active security realms in the order they should be used.
	// Set the active security realms in the order they should be used.
	Active []*string `json:"active,omitempty" tf:"active,omitempty"`

	// (String) Used to identify resource at nexus
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RealmsParameters struct {

	// (List of String) Set the active security realms in the order they should be used.
	// Set the active security realms in the order they should be used.
	// +kubebuilder:validation:Optional
	Active []*string `json:"active,omitempty" tf:"active,omitempty"`
}

// RealmsSpec defines the desired state of Realms
type RealmsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RealmsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RealmsInitParameters `json:"initProvider,omitempty"`
}

// RealmsStatus defines the observed state of Realms.
type RealmsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RealmsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Realms is the Schema for the Realmss API. Use this resource to activate and order the Nexus Security realms. !> This resource can only be used once for a nexus
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nexus}
type Realms struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.active) || (has(self.initProvider) && has(self.initProvider.active))",message="spec.forProvider.active is a required parameter"
	Spec   RealmsSpec   `json:"spec"`
	Status RealmsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RealmsList contains a list of Realmss
type RealmsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Realms `json:"items"`
}

// Repository type metadata.
var (
	Realms_Kind             = "Realms"
	Realms_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Realms_Kind}.String()
	Realms_KindAPIVersion   = Realms_Kind + "." + CRDGroupVersion.String()
	Realms_GroupVersionKind = CRDGroupVersion.WithKind(Realms_Kind)
)

func init() {
	SchemeBuilder.Register(&Realms{}, &RealmsList{})
}
