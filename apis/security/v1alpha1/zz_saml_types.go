/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SAMLInitParameters struct {

	// (String) IdP field mappings for user's email address
	// IdP field mappings for user's email address
	EmailAttribute *string `json:"emailAttribute,omitempty" tf:"email_attribute,omitempty"`

	// (String) Entity ID URI
	// Entity ID URI
	EntityID *string `json:"entityId,omitempty" tf:"entity_id,omitempty"`

	// (String) IdP field mappings for user's given name
	// IdP field mappings for user's given name
	FirstNameAttribute *string `json:"firstNameAttribute,omitempty" tf:"first_name_attribute,omitempty"`

	// (String) IdP field mappings for user's groups
	// IdP field mappings for user's groups
	GroupsAttribute *string `json:"groupsAttribute,omitempty" tf:"groups_attribute,omitempty"`

	// (String) SAML Identity Provider Metadata XML
	// SAML Identity Provider Metadata XML
	IdpMetadata *string `json:"idpMetadata,omitempty" tf:"idp_metadata,omitempty"`

	// (String) IdP field mappings for user's family name
	// IdP field mappings for user's family name
	LastNameAttribute *string `json:"lastNameAttribute,omitempty" tf:"last_name_attribute,omitempty"`

	// (String) IdP field mappings for username
	// IdP field mappings for username
	UsernameAttribute *string `json:"usernameAttribute,omitempty" tf:"username_attribute,omitempty"`

	// (Boolean) By default, if a signing key is found in the IdP metadata, then NXRM will attempt to validate signatures on the assertions.
	// By default, if a signing key is found in the IdP metadata, then NXRM will attempt to validate signatures on the assertions.
	ValidateAssertionSignature *bool `json:"validateAssertionSignature,omitempty" tf:"validate_assertion_signature,omitempty"`

	// (Boolean) By default, if a signing key is found in the IdP metadata, then NXRM will attempt to validate signatures on the response.
	// By default, if a signing key is found in the IdP metadata, then NXRM will attempt to validate signatures on the response.
	ValidateResponseSignature *bool `json:"validateResponseSignature,omitempty" tf:"validate_response_signature,omitempty"`
}

type SAMLObservation struct {

	// (String) IdP field mappings for user's email address
	// IdP field mappings for user's email address
	EmailAttribute *string `json:"emailAttribute,omitempty" tf:"email_attribute,omitempty"`

	// (String) Entity ID URI
	// Entity ID URI
	EntityID *string `json:"entityId,omitempty" tf:"entity_id,omitempty"`

	// (String) IdP field mappings for user's given name
	// IdP field mappings for user's given name
	FirstNameAttribute *string `json:"firstNameAttribute,omitempty" tf:"first_name_attribute,omitempty"`

	// (String) IdP field mappings for user's groups
	// IdP field mappings for user's groups
	GroupsAttribute *string `json:"groupsAttribute,omitempty" tf:"groups_attribute,omitempty"`

	// (String) Used to identify resource at nexus
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) SAML Identity Provider Metadata XML
	// SAML Identity Provider Metadata XML
	IdpMetadata *string `json:"idpMetadata,omitempty" tf:"idp_metadata,omitempty"`

	// (String) IdP field mappings for user's family name
	// IdP field mappings for user's family name
	LastNameAttribute *string `json:"lastNameAttribute,omitempty" tf:"last_name_attribute,omitempty"`

	// (String) IdP field mappings for username
	// IdP field mappings for username
	UsernameAttribute *string `json:"usernameAttribute,omitempty" tf:"username_attribute,omitempty"`

	// (Boolean) By default, if a signing key is found in the IdP metadata, then NXRM will attempt to validate signatures on the assertions.
	// By default, if a signing key is found in the IdP metadata, then NXRM will attempt to validate signatures on the assertions.
	ValidateAssertionSignature *bool `json:"validateAssertionSignature,omitempty" tf:"validate_assertion_signature,omitempty"`

	// (Boolean) By default, if a signing key is found in the IdP metadata, then NXRM will attempt to validate signatures on the response.
	// By default, if a signing key is found in the IdP metadata, then NXRM will attempt to validate signatures on the response.
	ValidateResponseSignature *bool `json:"validateResponseSignature,omitempty" tf:"validate_response_signature,omitempty"`
}

type SAMLParameters struct {

	// (String) IdP field mappings for user's email address
	// IdP field mappings for user's email address
	// +kubebuilder:validation:Optional
	EmailAttribute *string `json:"emailAttribute,omitempty" tf:"email_attribute,omitempty"`

	// (String) Entity ID URI
	// Entity ID URI
	// +kubebuilder:validation:Optional
	EntityID *string `json:"entityId,omitempty" tf:"entity_id,omitempty"`

	// (String) IdP field mappings for user's given name
	// IdP field mappings for user's given name
	// +kubebuilder:validation:Optional
	FirstNameAttribute *string `json:"firstNameAttribute,omitempty" tf:"first_name_attribute,omitempty"`

	// (String) IdP field mappings for user's groups
	// IdP field mappings for user's groups
	// +kubebuilder:validation:Optional
	GroupsAttribute *string `json:"groupsAttribute,omitempty" tf:"groups_attribute,omitempty"`

	// (String) SAML Identity Provider Metadata XML
	// SAML Identity Provider Metadata XML
	// +kubebuilder:validation:Optional
	IdpMetadata *string `json:"idpMetadata,omitempty" tf:"idp_metadata,omitempty"`

	// (String) IdP field mappings for user's family name
	// IdP field mappings for user's family name
	// +kubebuilder:validation:Optional
	LastNameAttribute *string `json:"lastNameAttribute,omitempty" tf:"last_name_attribute,omitempty"`

	// (String) IdP field mappings for username
	// IdP field mappings for username
	// +kubebuilder:validation:Optional
	UsernameAttribute *string `json:"usernameAttribute,omitempty" tf:"username_attribute,omitempty"`

	// (Boolean) By default, if a signing key is found in the IdP metadata, then NXRM will attempt to validate signatures on the assertions.
	// By default, if a signing key is found in the IdP metadata, then NXRM will attempt to validate signatures on the assertions.
	// +kubebuilder:validation:Optional
	ValidateAssertionSignature *bool `json:"validateAssertionSignature,omitempty" tf:"validate_assertion_signature,omitempty"`

	// (Boolean) By default, if a signing key is found in the IdP metadata, then NXRM will attempt to validate signatures on the response.
	// By default, if a signing key is found in the IdP metadata, then NXRM will attempt to validate signatures on the response.
	// +kubebuilder:validation:Optional
	ValidateResponseSignature *bool `json:"validateResponseSignature,omitempty" tf:"validate_response_signature,omitempty"`
}

// SAMLSpec defines the desired state of SAML
type SAMLSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SAMLParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SAMLInitParameters `json:"initProvider,omitempty"`
}

// SAMLStatus defines the observed state of SAML.
type SAMLStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SAMLObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SAML is the Schema for the SAMLs API. ~> PRO Feature Use this resource to create a Nexus Security SAML configuration.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nexus}
type SAML struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.idpMetadata) || (has(self.initProvider) && has(self.initProvider.idpMetadata))",message="spec.forProvider.idpMetadata is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.usernameAttribute) || (has(self.initProvider) && has(self.initProvider.usernameAttribute))",message="spec.forProvider.usernameAttribute is a required parameter"
	Spec   SAMLSpec   `json:"spec"`
	Status SAMLStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SAMLList contains a list of SAMLs
type SAMLList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SAML `json:"items"`
}

// Repository type metadata.
var (
	SAML_Kind             = "SAML"
	SAML_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SAML_Kind}.String()
	SAML_KindAPIVersion   = SAML_Kind + "." + CRDGroupVersion.String()
	SAML_GroupVersionKind = CRDGroupVersion.WithKind(SAML_Kind)
)

func init() {
	SchemeBuilder.Register(&SAML{}, &SAMLList{})
}
